 @Test
public void testProcessByReplayPartialGroups() {
    // Setup dummy allocation container
    AllocContainer container = new AllocContainer();
    container.setGroupId("GROUP_REPLAY");
    container.setOnlyAvg(false); // make it go to "updateMatchedStatus"
    container.setSamePriceQty(true);

    Map<String, AllocContainer> dummyMap = new HashMap<>();
    dummyMap.put("GROUP_REPLAY", container);

    // Spy the service to mock getAllecs()
    TmlOnExchangeApsServiceImpl spyService = Mockito.spy(service);

    // Stub getAllecs() to return our dummy data
    doReturn(dummyMap).when(spyService).getAllecs(anyString());

    // Use reflection to stub internal methods if needed (optional, or just let them execute)
    // For this example weâ€™ll invoke processByReplayPartialGroups directly
    spyService.processByReplayPartialGroups();

    // Verify updateMatchedStatus was called using reflection
    invokePrivateMethod("updateMatchedStatus",
        new Class[]{MessageStatus.class, AllocContainer.class},
        new Object[]{new MessageStatus("RTS", "fills found a match against group"), container});
}


import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.math.BigDecimal;
import java.util.*;

import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.jdbc.support.rowset.SqlRowSet;

import com.baml.tml.tmlaps.model.MessageStatus;
import com.baml.tml.tmlaps.onExchange.service.impl.TmlOnExchangeApsServiceImpl;
import com.baml.tml.tmlaps.onExchange.service.impl.util.TmlApsCHFeedUtil;
import com.baml.tml.tmlbase.trade.model.AllocContainer;
import com.baml.tml.tmlbase.trade.persistence.dao.QueryDaodbc;
import com.baml.tml.tmlbase.trade.persistence.dao.TAllocationGenericId;

@RunWith(MockitoJUnitRunner.class)
public class TmlOnExchangeApsServiceImplTest {

    @Mock private QueryDaodbc tmlQueryDao;
    @Mock private TmlApsCHFeedUtil tmlApsCHFeedUtil;
    @Mock private SqlRowSet namMarketsRowSet;
    @Mock private SqlRowSet bamlBrokersRowSet;

    @InjectMocks private TmlOnExchangeApsServiceImpl service;

    @Before
    public void setUp() throws Exception {
        when(namMarketsRowSet.next()).thenReturn(true).thenReturn(false);
        when(namMarketsRowSet.getString("ALIAS_C")).thenReturn("TEST_EXCHANGE");

        when(bamlBrokersRowSet.next()).thenReturn(true).thenReturn(false);
        when(bamlBrokersRowSet.getString("EXCHANGE_BROKER")).thenReturn("BAML_BROKER");

        when(tmlQueryDao.getRowSet(anyString()))
            .thenReturn(namMarketsRowSet)
            .thenReturn(bamlBrokersRowSet);

        service.init();
    }

    @Test
    public void testInit() {
        Assert.assertEquals(1, service.namMkts.size());
        Assert.assertTrue(service.namMkts.contains("TEST_EXCHANGE"));
        Assert.assertEquals(1, service.bamlMktBrkrs.size());
        Assert.assertTrue(service.bamlMktBrkrs.contains("BAML_BROKER"));
    }

    @Test
    public void testProcessByEachFill_NoAllocations() {
        when(tmlQueryDao.queryForRowMapper(anyString(), isNull(), any()))
            .thenReturn(Collections.emptyList());

        service.processByEachFill();

        verify(tmlApsCHFeedUtil, never()).updateStatus(any(), any(), any(), anyBoolean());
    }

    @Test
    public void testProcessByEachFill_ValidMatch() {
        TAllocationGenericId alloc = new TAllocationGenericId();
        alloc.setClientC("CLIENT1");
        alloc.setTmlAllocGroupIdC("GROUP1");
        alloc.setPriceD(BigDecimal.valueOf(100.0));
        alloc.setQuantityI(10);
        alloc.setGmiExchCdC("CME");
        alloc.setExecBrokerC("BAML");

        when(tmlQueryDao.queryForRowMapper(anyString(), isNull(), any()))
            .thenReturn(Collections.singletonList(alloc));

        service.processByEachFill();

        verify(tmlApsCHFeedUtil).updateMatchedStatus(
            argThat(status -> status.getStatus().contains("NMY") || status.getStatus().equals("MATCHED")),
            any(AllocContainer.class));
    }

    @Test
    public void testProcessBySum_MatchingSum() {
        TAllocationGenericId alloc = new TAllocationGenericId();
        alloc.setClientC("CLIENT2");
        alloc.setTmlAllocGroupIdC("GROUP2");
        alloc.setPriceD(BigDecimal.valueOf(200.0));
        alloc.setQuantityI(20);
        alloc.setGmiExchCdC("ICE");

        when(tmlQueryDao.queryForRowMapper(anyString(), isNull(), any()))
            .thenReturn(Collections.singletonList(alloc));

        service.processBySum();

        verify(tmlApsCHFeedUtil).updateMatchedStatus(
            argThat(status -> status.getStatus().contains("NMY") || status.getStatus().equals("MATCHED")),
            any(AllocContainer.class));
    }

    // -------------------------------
    // New Tests for processByReplayPartialGroups()
    // -------------------------------

    @Test
    public void testProcessByReplayPartialGroups_MatchingFills() {
        TmlOnExchangeApsServiceImpl spyService = Mockito.spy(service);
        AllocContainer container = mock(AllocContainer.class);

        Map<String, AllocContainer> mockMap = new HashMap<>();
        mockMap.put("GROUP1", container);

        doReturn(mockMap).when(spyService).getAllecs(anyString());
        doReturn(false).when(container).hasOnlyAvg();
        doReturn(true).when(container).hasSamePriceQty(5);

        doNothing().when(spyService).statusProcessing(anyString(), any());
        doNothing().when(spyService).statusFailure(anyString(), any());
        doNothing().when(spyService).updateMatchedStatus(any(), any());

        spyService.processByReplayPartialGroups();

        verify(spyService).statusProcessing(eq("GROUP1"), eq(container));
        verify(spyService, never()).statusFailure(any(), any());
        verify(spyService).updateMatchedStatus(
            argThat(status -> " RTS".equals(status.getStatus())),
            eq(container));
    }

    @Test
    public void testProcessByReplayPartialGroups_OnlyAvgFills() {
        TmlOnExchangeApsServiceImpl spyService = Mockito.spy(service);
        AllocContainer container = mock(AllocContainer.class);

        Map<String, AllocContainer> mockMap = new HashMap<>();
        mockMap.put("GROUP2", container);

        doReturn(mockMap).when(spyService).getAllecs(anyString());
        doReturn(true).when(container).hasOnlyAvg();

        doNothing().when(spyService).statusFailure(anyString(), any());

        spyService.processByReplayPartialGroups();

        verify(spyService).statusFailure(eq("GROUP2"), eq(container));
        verify(spyService, never()).updateMatchedStatus(any(), any());
    }

    @Test
    public void testProcessByReplayPartialGroups_MismatchedFills() {
        TmlOnExchangeApsServiceImpl spyService = Mockito.spy(service);
        AllocContainer container = mock(AllocContainer.class);

        Map<String, AllocContainer> mockMap = new HashMap<>();
        mockMap.put("GROUP3", container);

        doReturn(mockMap).when(spyService).getAllecs(anyString());
        doReturn(false).when(container).hasOnlyAvg();
        doReturn(false).when(container).hasSamePriceQty(5);

        doNothing().when(spyService).statusFailure(anyString(), any());

        spyService.processByReplayPartialGroups();

        verify(spyService).statusFailure(eq("GROUP3"), eq(container));
        verify(spyService, never()).updateMatchedStatus(any(), any());
    }
}


verify(tmlApsCHFeedUtil).updateMatchedStatus(
    argThat(status -> status.getStatus().contains("NMY") || status.getStatus().contains("MATCHED")),
    any(AllocContainer.class)
);


verify(tmlApsCHFeedUtil).updateMatchedStatus(
    argThat(status -> status.getStatus().contains("NMY")),  // or use any()
    any(AllocContainer.class)
);


import org.springframework.util.ReflectionUtils;

import java.lang.reflect.Field;

@Test
public void testInit() {
    Field namMktsField = ReflectionUtils.findField(TmlOnExchangeApsServiceImpl.class, "namMkts");
    Field bamlMktBrkrsField = ReflectionUtils.findField(TmlOnExchangeApsServiceImpl.class, "bamlMktBrkrs");

    ReflectionUtils.makeAccessible(namMktsField);
    ReflectionUtils.makeAccessible(bamlMktBrkrsField);

    List<String> namMkts = (List<String>) ReflectionUtils.getField(namMktsField, service);
    List<String> bamlMktBrkrs = (List<String>) ReflectionUtils.getField(bamlMktBrkrsField, service);

    Assert.assertEquals(1, namMkts.size());
    Assert.assertTrue(namMkts.contains("TEST_EXCHANGE"));
    Assert.assertEquals(1, bamlMktBrkrs.size());
    Assert.assertTrue(bamlMktBrkrs.contains("BAML_BROKER"));
}


import java.lang.reflect.Field;

private List<String> getPrivateListField(Object obj, String fieldName) throws Exception {
    Field field = obj.getClass().getDeclaredField(fieldName);
    field.setAccessible(true);
    return (List<String>) field.get(obj);
}

@Test
public void testInit() throws Exception {
    List<String> namMkts = getPrivateListField(service, "namMkts");
    List<String> bamlMktBrkrs = getPrivateListField(service, "bamlMktBrkrs");

    Assert.assertEquals(1, namMkts.size());
    Assert.assertTrue(namMkts.contains("TEST_EXCHANGE"));
    Assert.assertEquals(1, bamlMktBrkrs.size());
    Assert.assertTrue(bamlMktBrkrs.contains("BAML_BROKER"));
}


package com.baml.tml.tmlaps.dao;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import com.baml.tml.tmlbase.trade.util.AllocationType;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.test.util.ReflectionTestUtils;

import com.baml.tml.tmlbase.trade.persistence.dao.util.QueryDaoJdbc;

@RunWith(MockitoJUnitRunner.class)
public class TmlInternalApsDaoTest {

    @InjectMocks
    private TmlInternalApsDao dao;

    @Mock @Qualifier("tmlQueryDao")
    private QueryDaoJdbc tmlQueryDao;

    @Mock @Qualifier("gmiQueryDao")
    private QueryDaoJdbc gmiQueryDao;

    @Mock private Connection connection;
    @Mock private PreparedStatement preparedStatement;
    @Mock private ResultSet resultSet;

    @Before
    public void setup() throws SQLException {
        // Inject query values
        ReflectionTestUtils.setField(dao, "reportUnMatchedQry", "UNMATCHED_QUERY");
        ReflectionTestUtils.setField(dao, "reportMatchedQry", "MATCHED_QUERY");
        ReflectionTestUtils.setField(dao, "reportAllocUnMatchedQry", "ALLOC_UNMATCHED_QUERY");
        ReflectionTestUtils.setField(dao, "reportAllocMatchedQry", "ALLOC_MATCHED_QUERY");

        // Common mock setup
        when(gmiQueryDao.connection()).thenReturn(connection);
        when(tmlQueryDao.connection()).thenReturn(connection);
        when(connection.prepareStatement(anyString())).thenReturn(preparedStatement);

@Before
public void setup() throws SQLException {
    // ... existing setup code ...

    // Mock ResultSet metadata
    ResultSetMetaData metaData = mock(ResultSetMetaData.class);
    when(resultSet.getMetaData()).thenReturn(metaData);
    
    // Mock at least 18 columns (to match column index 17 in your code)
    when(metaData.getColumnCount()).thenReturn(18); 
    
    // Mock column names (adjust according to your actual columns)
    when(metaData.getColumnName(anyInt())).thenAnswer(invocation -> {
        int index = invocation.getArgument(0);
        return "COLUMN_" + index;  // Generic column name
    });
}
@Test
public void testCsvReport_InternalAps() throws SQLException, IOException {
    // Mock result set data
    when(resultSet.next()).thenReturn(true, false);  // One row
    when(resultSet.getString(anyInt())).thenReturn("DUMMY_VALUE");

    Map<String, Object> result = dao.csvReport(AllocationType.INTERNALAPS);

    assertTrue(result.containsKey("ALLOC_MATCHED_REPORT"));
    assertTrue(result.containsKey("ALLOC_UNMATCHED_REPORT"));
}
    }

    @Test
    public void testCsvReport_InternalAps() throws SQLException, IOException {
        // Setup mock results for both reports
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        when(resultSet.next()).thenReturn(true, false);  // Single row
        
        Map<String, Object> result = dao.csvReport(AllocationType.INTERNALAPS);
        
        assertTrue(result.containsKey("ALLOC_MATCHED_REPORT"));
        assertTrue(result.containsKey("ALLOC_UNMATCHED_REPORT"));
        assertTrue(((Set<?>) result.get("MATCHED_GROUPS")).isEmpty());
    }

    @Test
    public void testMatchedCsvReport_WithFillLegnd() throws Exception {
        // Mock result set data
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        when(resultSet.next()).thenReturn(true, true, false);
        when(resultSet.getString(2)).thenReturn("GROUP1", "GROUP2");  // Column indexes are 1-based
        when(resultSet.getString(18)).thenReturn("FILL_LEGND", null);

        Map<String, Object> map = new HashMap<>();
        dao.matchedCsvReport(map, AllocationType.INTERNALAPS);

        assertEquals(1, map.get("MATCHED_NUMBER_FILL_LINES"));
        assertEquals(Set.of("GROUP1", "GROUP2"), map.get("MATCHED_GROUPS"));
    }

    @Test
    public void testUnmatchedCsvReport_MixedStatuses() throws Exception {
        // Mock result set data
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        when(resultSet.next()).thenReturn(true, true, false);
        when(resultSet.getString(1)).thenReturn("NOT MATCHED", "INVALID");  // Status column
        when(resultSet.getString(2)).thenReturn("GROUP3", "GROUP4");      // Group column
        when(resultSet.getString(3)).thenReturn("FILL", null);             // Fill column

        Map<String, Object> map = new HashMap<>();
        dao.unmatchedCsvReport(map, AllocationType.INTERNALAPS);

        assertEquals(Set.of("GROUP3"), map.get("UNMATCHED_GROUPS"));
        assertEquals(Set.of("GROUP4"), map.get("INVALID_GROUPS"));
        assertEquals(1, map.get("UNMATCHED_NUMBER_FILL_LINES"));
    }

    @Test
    public void testDatabaseErrorHandling() throws SQLException {
        when(preparedStatement.executeQuery()).thenThrow(new SQLException("Connection failed"));

        Map<String, Object> map = new HashMap<>();
        dao.matchedCsvReport(map, AllocationType.INTERNALAPS);

        assertNotNull(map.get("ALLOC_MATCHED_REPORT"));
        verify(gmiQueryDao).close(null, preparedStatement, connection);
    }

    @Test
    public void testEmptyResultSet() throws SQLException {
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        when(resultSet.next()).thenReturn(false);  // No results

        Map<String, Object> map = new HashMap<>();
        dao.unmatchedCsvReport(map, AllocationType.INTERNALAPS);

        assertTrue(((Set<?>) map.get("UNMATCHED_GROUPS")).isEmpty());
        assertEquals(0, map.get("UNMATCHED_NUMBER_FILL_LINES"));
    }

    @Test
    public void testAddDays() {
        // Indirectly test date formatting through report generation
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        
        dao.csvReport(AllocationType.INTERNALAPS);
        verify(preparedStatement, atLeastOnce()).setString(1, anyString());
        verify(preparedStatement, atLeastOnce()).setString(2, anyString());
    }
}
